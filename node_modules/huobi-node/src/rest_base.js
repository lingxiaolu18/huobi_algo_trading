"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rest_base = void 0;
const lodash_1 = require("lodash");
const utility_1 = require("./utility");
const fetch = require('node-fetch');
var N_status;
(function (N_status) {
    N_status["ok"] = "ok";
    N_status["error"] = "error";
})(N_status || (N_status = {}));
class Rest_base {
    constructor(opt) {
        this.opt = {};
        this.opt = lodash_1.merge({}, this.opt, opt);
    }
    get host() {
        return `${this.opt.api_proto}://${this.opt.api_domain}`;
    }
    get(path, params) {
        return this.call('GET', path, params);
    }
    post(path, params) {
        return this.call('POST', path, params);
    }
    call(method, path, params) {
        if (method !== 'GET' && method !== 'POST') {
            throw 'method only be GET or POST';
        }
        path = this.path_format(path);
        const { qs, query } = this.sign({
            path,
            method,
            params,
        });
        if (method === 'GET') {
            return this.fetch(`${path}?${qs}`, { method });
        }
        return this.fetch(`${path}?${qs}`, {
            method,
            body: query,
        });
    }
    sign({ method, path, params, }) {
        var _a, _b;
        if (!path.startsWith('/')) {
            throw 'path must starts with \/';
        }
        const need_signature = !path.startsWith('/market');
        const o = this.opt;
        let query;
        if (need_signature) {
            query = Object.assign({ AccessKeyId: (_a = o.auth) === null || _a === void 0 ? void 0 : _a.key, SignatureMethod: 'HmacSHA256', SignatureVersion: '2', Timestamp: new Date().toISOString().replace(/\..+/, '') }, params);
        }
        else {
            query = Object.assign({}, params);
        }
        const params_arr = [];
        for (const item in query) {
            params_arr.push(`${item}=${encodeURIComponent(query[item])}`);
        }
        const params_str = params_arr.sort().join('&');
        if (!need_signature) {
            return {
                query: query,
                signature: '',
                qs: params_str,
            };
        }
        const signature = utility_1.sign_rest(method, o.api_domain, path, params_str, (_b = o.auth) === null || _b === void 0 ? void 0 : _b.secret);
        return {
            signature,
            query: query,
            qs: `${params_str}&Signature=${signature}`,
        };
    }
    path_format(path) {
        path = path.trim();
        if (!path.startsWith('/')) {
            path = `/${path}`;
        }
        if (path.endsWith('/')) {
            path = path.substring(0, path.length - 1);
        }
        return path;
    }
    fetch(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.host}${path}`;
            const r = yield fetch(url, Object.assign({}, options));
            return yield r.json();
        });
    }
}
exports.Rest_base = Rest_base;
